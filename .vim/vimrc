" Author: Alan Chen
" Alan's vimrc.
" This is a helpful resource:
" https://gist.github.com/romainl/9ecd7b09a693816997ba

" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
    " Aesthetic
    Plug 'itchyny/lightline.vim'
    Plug 'junegunn/goyo.vim'
    Plug 'nanotech/jellybeans.vim'
    " Functional
    Plug 'airblade/vim-gitgutter'
    Plug 'ferrine/md-img-paste.vim'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'junegunn/vim-peekaboo'
    Plug 'mantiz/vim-plugin-dirsettings'
    Plug 'mattn/calendar-vim'
    Plug 'preservim/vim-textobj-sentence'
    Plug 'sheerun/vim-polyglot'
    Plug 'tpope/vim-characterize'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-surround'
    Plug 'vim-utils/vim-troll-stopper'
    Plug 'vimwiki/vimwiki'
call plug#end()

call dirsettings#Install()

" For ferrine/md-img-paste.vim
autocmd FileType markdown nnoremap <buffer><silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
" there are some defaults for image directory and image name, you can change them
let g:mdip_imgdir = 'img'
let g:mdip_imgname = 'image'

" Alan's modifications start here:

" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
" Numbers on the side
set relativenumber
set number
set hidden
set hlsearch

" UI Stuff
if has('gui_running')
    set guioptions-=T  "remove toolbar
    " Sets font to M+ mn
    set guifont=M+_1m:h11:cSHIFTJIS:qDRAFT
endif

colorscheme jellybeans

" Keyboard mapping stuff

" Remaps "jj" to <Esc> while in insert mode
inoremap jj <Esc>
" Remap Leader key
map <Space> <Leader>

" fzf related binds
" https://levelup.gitconnected.com/improving-vim-workflow-with-fzf-3f8bedaca1b2
nnoremap <C-g> :Rg<Cr>
nnoremap <C-p> :GFiles<Cr>
nnoremap <silent><leader>b :Buffers<CR>

" Split management
" Partially inspired by: https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally
" Moving between splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" More natural split opening
set splitbelow
set splitright

" cursorline
set cursorline

" vimwiki stuff
let wiki_1 = {}
let wiki_1.ext = '.md'
let wiki_1.index = 'README'
let wiki_1.path = '~/vimwiki/'
let wiki_1.path_html = '~/vimwiki_html/'
let wiki_1.syntax = 'markdown'
let wiki_1.links_space_char = '_'
let wiki_1.auto_tags = 1
" let wiki_1.auto_diary_index = 1
" let wiki_1.auto_generate_links = 1
" let wiki_1.auto_generate_tags = 1

let g:vimwiki_list = [wiki_1]

let g:vimwiki_auto_chdir = 1
let g:vimwiki_auto_header = 1
let g:vimwiki_folding = 'expr'
let g:vimwiki_markdown_link_ext = 1
let g:vimwiki_url_maxsave = 40

" Persistent Undo
set undofile
set undodir=$HOME/.vim/undodir

" FUNCTIONS
"
" function! 

" Map <F5> to compile files to .pdf
" Markdown
" LaTeX
augroup Markup_Mappings
    autocmd!
    " Exports to .pdf and .html, respectively.
    autocmd Filetype markdown,tex,latex,context,plaintex map <F5> :silent !pandoc<space>"<C-r>%"<space>-o<space>"<C-r>%.pdf"<Enter><Enter>
    autocmd Filetype markdown map <S-F5> :silent !pandoc<space>"<C-r>%"<space>-o<space>"<C-r>%.html"<Enter><Enter>
    " Replaces 0 width space (<200b>) with <space>
    autocmd Filetype markdown map <F4> :%s/\%u200b/<space>/g<Enter>
augroup END

highlight TrollStopper ctermbg = red guibg = #FF0000

set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac

" switch spellcheck languages
" https://vim.fandom.com/wiki/Toggle_spellcheck_with_function_keys
let g:myLang = 0
let g:myLangList = [ "nospell", "en_au, en_gb, cjk" ]
function! ChangeSpellLang()
  "loop through languages
  let g:myLang = g:myLang + 1
  if g:myLang >= len(g:myLangList) | let g:myLang = 0 | endif
  if g:myLang == 0 | set nospell | endif
  if g:myLang == 1 | setlocal spell spelllang=en_au,en_gb,cjk | endif
  echo "language:" g:myLangList[g:myLang]
endf

map <F7> :call ChangeSpellLang()<CR>
imap <F7> <C-o>:call ChangeSpellLang()<CR>

" https://thoughtbot.com/blog/vim-spell-checking
autocmd BufRead,BufNewFile *.md setlocal spell

" gotta go fast
set lazyredraw
